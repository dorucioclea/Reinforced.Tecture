// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reinforced.Samples.ToyFactory.Data;

#nullable disable

namespace Reinforced.Samples.ToyFactory.Data.Migrations
{
    [DbContext(typeof(ToyFactoryDbContext))]
    partial class ToyFactoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Entities.Blueprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ToyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ToyTypeId");

                    b.ToTable("Blueprints");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Entities.BlueprintResources", b =>
                {
                    b.Property<int>("BlueprintId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.HasKey("BlueprintId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("BlueprintResources");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Entities.ToyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ToyTypes");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.MeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("ShortName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<double>("StockQuantity")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.Suppliement.ResourceSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ResourceSupplies");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.Suppliement.ResourceSupplyItem", b =>
                {
                    b.Property<int>("ResourceSupplyId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.HasKey("ResourceSupplyId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceSupplyItems");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.Suppliement.ResourceSupplyStatusHistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Next")
                        .HasColumnType("int");

                    b.Property<int?>("Previous")
                        .HasColumnType("int");

                    b.Property<int>("ResourceSupplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourceSupplyId");

                    b.ToTable("ResourceSupplyStatusHistoryItems");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Entities.Blueprint", b =>
                {
                    b.HasOne("Reinforced.Samples.ToyFactory.Logic.Entities.ToyType", "ToyType")
                        .WithMany()
                        .HasForeignKey("ToyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToyType");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Entities.BlueprintResources", b =>
                {
                    b.HasOne("Reinforced.Samples.ToyFactory.Logic.Entities.Blueprint", "Blueprint")
                        .WithMany()
                        .HasForeignKey("BlueprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blueprint");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.Resource", b =>
                {
                    b.HasOne("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.Suppliement.ResourceSupplyItem", b =>
                {
                    b.HasOne("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.Suppliement.ResourceSupply", "ResourceSupply")
                        .WithMany()
                        .HasForeignKey("ResourceSupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("ResourceSupply");
                });

            modelBuilder.Entity("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.Suppliement.ResourceSupplyStatusHistoryItem", b =>
                {
                    b.HasOne("Reinforced.Samples.ToyFactory.Logic.Warehouse.Entities.Suppliement.ResourceSupply", "ResourceSupply")
                        .WithMany()
                        .HasForeignKey("ResourceSupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourceSupply");
                });
#pragma warning restore 612, 618
        }
    }
}
